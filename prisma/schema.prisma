enum UserType {
  SUPERADMIN
  ADMIN
  SELLER
  DRIVER
  CLIENT
}

enum StatusType {
  ENABLED
  DISABLED
}

enum MovementType {
  CREATION
  IN
  OUT
  TRANSFER_IN
  TRANSFER_OUT
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  //shadowDatabaseUrl = env("SHADOW_URL")
  //url      = env("SHADOW_URL")
}

model Settings {
  id             Int      @id @default(autoincrement())
  name           String
  address        String
  cp             String
  province       String
  ivaCondition   String
  cuit           String
  invoceName     String
  invoceNumber   Int
  imageURL       String
  showOtherTaxes Int      @default(1)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt

  @@map(name: "settings")
}

model Afip {
  id             Int      @id @default(autoincrement())
  posNumber      Int
  maxPerInvoice  Int
  invoiceM       Int      @default(0)
  certExpiration DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt

  @@map(name: "afip")
}

model Users {
  id              Int              @id @default(autoincrement())
  name            String
  lastname        String
  email           String           @unique
  password        String
  roleId          Int              @default(4)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  // Relations
  role            Roles            @relation(fields: [roleId], references: [id])
  purchases       Purchases[]
  movements       Movements[]
  discharges      Discharges[]
  transfer        Transfer[]
  cashRegisters   CashRegisters[]
  cashMovements   CashMovements[]
  warehouses      Warehouses[]
  userPreferences UserPreferences?

  @@map(name: "users")
}

model UserPreferences {
  id          Int        @id @default(autoincrement())
  userId      Int        @unique
  warehouseId Int        @default(1)
  priceListId Int        @default(1)
  clientId    Int        @default(1)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  //Relations
  user        Users      @relation(fields: [userId], references: [id])
  warehouse   Warehouses @relation(fields: [warehouseId], references: [id])
  pricelist   Pricelists @relation(fields: [priceListId], references: [id])
  client      Clients    @relation(fields: [clientId], references: [id])

  @@map(name: "user-preferences")
}

model Roles {
  id          Int       @id @default(autoincrement())
  name        UserType  @unique @default(SELLER)
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  // Relations
  users       Users[]
  clients     Clients[]

  @@map(name: "roles")
}

model Products {
  id                   Int                    @id @default(autoincrement())
  code                 String                 @unique
  barcode              String
  name                 String
  alertlowstock        StatusType             @default(DISABLED)
  lowstock             Int                    @default(0)
  status               StatusType             @default(ENABLED)
  allownegativestock   StatusType             @default(DISABLED)
  description          String?                @default("")
  categoryId           Int
  unitId               Int
  ivaConditionId       Int                    @default(6)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @default(now()) @updatedAt
  // Relations
  category             Categories             @relation(fields: [categoryId], references: [id])
  unit                 Units                  @relation(fields: [unitId], references: [id])
  ivaCondition         IvaConditions          @relation(fields: [ivaConditionId], references: [id])
  stocks               Stocks[]
  prices               Prices[]
  costs                Costs[]
  purchaseDetails      PurchaseDetails[]
  dischargeDetails     DischargeDetails[]
  transferDetails      TransferDetails[]
  cashMovementsDetails CashMovementsDetails[]
  stocksDetails        StocksDetails[]

  @@map(name: "products")
}

model IvaConditions {
  id          Int        @id @default(autoincrement())
  code        String
  tax         Float
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  // Relations
  products    Products[]

  @@map(name: "iva_condition")
}

model IvaType {
  id          Int       @id @default(autoincrement())
  code        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  // Relations
  clients     Clients[]

  @@map(name: "iva_type")
}

model Categories {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  // Relations
  products    Products[]

  @@map(name: "categories")
}

model Units {
  id        Int        @id @default(autoincrement())
  code      String     @unique
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  //Relations
  products  Products[]

  @@map(name: "units")
}

model Warehouses {
  id              Int               @id @default(autoincrement())
  code            String            @unique
  driver          Int               @default(0)
  userId          Int               @default(1)
  description     String?
  address         String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  // Relations
  stocks          Stocks[]
  discharges      Discharges[]
  purchases       Purchases[]
  transferO       Transfer[]        @relation(name: "WarehouseOrigin")
  transferD       Transfer[]        @relation(name: "WarehouseDestination")
  user            Users             @relation(fields: [userId], references: [id])
  cashMovements   CashMovements[]
  userPreferences UserPreferences[]
  stocksDetails   StocksDetails[]

  @@map(name: "warehouses")
}

model Stocks {
  id          Int        @id @default(autoincrement())
  productId   Int
  warehouseId Int
  stock       Float      @default(0)
  prevstock   Float      @default(0)
  prevdate    DateTime   @default(now())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  // Relations
  products    Products   @relation(fields: [productId], references: [id], onDelete: Cascade)
  warehouse   Warehouses @relation(fields: [warehouseId], references: [id])

  @@map(name: "stock")
}

model StocksDetails {
  id          Int        @id @default(autoincrement())
  productId   Int
  warehouseId Int
  movementId  Int
  stock       Float      @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  // Relations
  movement    Movements  @relation(fields: [movementId], references: [id], onDelete: Cascade)
  products    Products   @relation(fields: [productId], references: [id], onDelete: Cascade)
  warehouse   Warehouses @relation(fields: [warehouseId], references: [id])

  @@map(name: "stock_details")
}

model Pricelists {
  id              Int               @id @default(autoincrement())
  code            String            @unique
  description     String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  // Relations
  prices          Prices[]
  userPreferences UserPreferences[]

  @@map(name: "price_lists")
}

model Prices {
  id          Int        @id @default(autoincrement())
  productId   Int
  pricelistId Int
  price       Float      @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  // Relations
  products    Products   @relation(fields: [productId], references: [id], onDelete: Cascade)
  pricelists  Pricelists @relation(fields: [pricelistId], references: [id])

  @@map(name: "prices")
}

model Costs {
  id        Int      @id @default(autoincrement())
  productId Int
  price     Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  // Relations
  products  Products @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map(name: "costs")
}

model Suppliers {
  id        Int         @id @default(autoincrement())
  cuit      String      @unique
  name      String?
  email     String?     @unique
  phone     String?
  mobile    String?
  address   String?
  info      String?
  stateId   Int
  city      String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
  //Relations
  purchase  Purchases[]
  state     States      @relation(fields: [stateId], references: [id])

  @@map(name: "suppliers")
}

model Identifications {
  id          Int       @id @default(autoincrement())
  code        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  // Relations
  clients     Clients[]

  @@map(name: "identifications")
}

model Clients {
  id               Int               @id @default(autoincrement())
  name             String
  document         String            @unique
  email            String            @unique
  password         String
  stateId          Int
  phone            String?
  city             String?
  mobile           String?
  address          String?
  info             String?
  roleId           Int               @default(5)
  identificationId Int               @default(36)
  ivaTypeId        Int               @default(5)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now()) @updatedAt
  // Relations
  role             Roles             @relation(fields: [roleId], references: [id])
  state            States            @relation(fields: [stateId], references: [id])
  identification   Identifications   @relation(fields: [identificationId], references: [id])
  ivaType          IvaType           @relation(fields: [ivaTypeId], references: [id])
  cashMovements    CashMovements[]
  userPreferences  UserPreferences[]
  movements        Movements[] // M

  @@map(name: "clients")
}

model Purchases {
  id              Int               @id @default(autoincrement())
  supplierId      Int
  warehouseId     Int
  total           Float
  date            DateTime          @default(now())
  driver          String
  transport       String
  userId          Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  // Relations
  supplier        Suppliers         @relation(fields: [supplierId], references: [id])
  warehouse       Warehouses        @relation(fields: [warehouseId], references: [id])
  user            Users             @relation(fields: [userId], references: [id])
  purchaseDetails PurchaseDetails[]
  movements       Movements[] // M

  @@map(name: "purchases")
}

model PurchaseDetails {
  id         Int       @id @default(autoincrement())
  purchaseId Int
  productId  Int
  price      Float
  quantity   Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  // Relations
  purchase   Purchases @relation(fields: [purchaseId], references: [id])
  product    Products  @relation(fields: [productId], references: [id])

  @@map(name: "purchase_details")
}

model Movements {
  id              Int             @id @default(autoincrement())
  amount          Float
  concept         String
  type            MovementType
  userId          Int
  clientId        Int?
  purchaseId      Int?
  cashMovementId  Int?
  dischargeId     Int?
  transferId      Int?
  paymentMethodId Int
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now()) @updatedAt
  // Relations
  user            Users           @relation(fields: [userId], references: [id])
  paymentMethod   PaymentMethods  @relation(fields: [paymentMethodId], references: [id])
  client          Clients?        @relation(fields: [clientId], references: [id])
  purchase        Purchases?      @relation(fields: [purchaseId], references: [id])
  cashMovement    CashMovements?  @relation(fields: [cashMovementId], references: [id])
  discharge       Discharges?     @relation(fields: [dischargeId], references: [id])
  transfer        Transfer?       @relation(fields: [transferId], references: [id])
  stocksDetails   StocksDetails[]

  @@map(name: "movements")
}

model Discharges {
  id               Int                @id @default(autoincrement())
  warehouseId      Int
  cost             Float
  userId           Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt
  //Relations
  warehouses       Warehouses         @relation(fields: [warehouseId], references: [id])
  user             Users              @relation(fields: [userId], references: [id])
  dischargeDetails DischargeDetails[]
  movements        Movements[] // M

  @@map(name: "discharges")
}

model DischargeDetails {
  id          Int        @id @default(autoincrement())
  dischargeId Int
  productId   Int
  quantity    Int
  cost        Float
  reasonId    Int        @default(1)
  info        String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  //Relations
  discharge   Discharges @relation(fields: [dischargeId], references: [id])
  reason      Reasons    @relation(fields: [reasonId], references: [id])
  products    Products   @relation(fields: [productId], references: [id])

  @@map(name: "discharge_details")
}

model Reasons {
  id               Int                @id @default(autoincrement())
  reason           String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt
  // Relations
  dischargeDetails DischargeDetails[]

  @@map(name: "reasons")
}

model Transfer {
  id                     Int               @id @default(autoincrement())
  warehouseOriginId      Int
  warehouseDestinationId Int
  userId                 Int
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @default(now()) @updatedAt
  //Relations
  warehouseOrigin        Warehouses        @relation(fields: [warehouseOriginId], references: [id], name: "WarehouseOrigin")
  warehouseDestination   Warehouses        @relation(fields: [warehouseDestinationId], references: [id], name: "WarehouseDestination")
  user                   Users             @relation(fields: [userId], references: [id])
  transferDetails        TransferDetails[]
  movements              Movements[] // M

  @@map(name: "transfer")
}

model TransferDetails {
  id         Int      @id @default(autoincrement())
  transferId Int
  productId  Int
  quantity   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  //Relations
  transfer   Transfer @relation(fields: [transferId], references: [id])
  products   Products @relation(fields: [productId], references: [id])

  @@map(name: "transfer_details")
}

model CashRegisters {
  id             Int             @id @default(autoincrement())
  openingDate    DateTime
  closingDate    DateTime?
  initialBalance Float
  finalBalance   Float
  userId         Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt
  //Relations
  user           Users           @relation(fields: [userId], references: [id])
  cashMovements  CashMovements[]

  @@map(name: "cash_registers")
}

model CashMovements {
  id               Int           @id @default(autoincrement())
  subtotal         Float
  discount         Float         @default(0)
  discountPercent  Float         @default(0)
  recharge         Float         @default(0)
  rechargePercent  Float         @default(0)
  otherTributes    Float         @default(0)
  total            Float
  iva              Boolean
  cashRegisterId   Int
  clientId         Int
  warehouseId      Int
  userId           Int
  posNumber        Int
  invoceTypeId     Int
  invoceNumber     Int
  cbteTipo         Int?
  invoceIdAfip     Int?
  invoceNumberAfip Int?
  cae              String?
  vtoCae           DateTime?
  impTotal         String?
  creditNote       Int?
  info             String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now()) @updatedAt
  //Relations
  user             Users         @relation(fields: [userId], references: [id])
  cashRegister     CashRegisters @relation(fields: [cashRegisterId], references: [id])
  warehouse        Warehouses    @relation(fields: [warehouseId], references: [id])
  client           Clients       @relation(fields: [clientId], references: [id])
  invoceType       InvoceTypes   @relation(fields: [invoceTypeId], references: [id])

  cashMovementsDetails CashMovementsDetails[]
  paymentMethodDetails PaymentMethodDetails[]
  otherTributesDetails OtherTributesDetails[]
  movements            Movements[]

  @@map(name: "cash_movements")
}

model CashMovementsDetails {
  id             Int           @id @default(autoincrement())
  cashMovementId Int
  productId      Int
  price          Float
  tax            Float
  quantity       Int
  totalDiscount  Float         @default(0)
  totalIVA       Float         @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt
  // Relations
  cashMovement   CashMovements @relation(fields: [cashMovementId], references: [id])
  product        Products      @relation(fields: [productId], references: [id])

  @@map(name: "cash_movements_details")
}

model PaymentMethods {
  id                   Int                    @id @default(autoincrement())
  code                 String
  description          String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @default(now()) @updatedAt
  // Relations
  paymentMethodDetails PaymentMethodDetails[]
  movements            Movements[]

  @@map(name: "payment_methods")
}

model PaymentMethodDetails {
  id              Int            @id @default(autoincrement())
  cashMovementId  Int
  amount          Float
  paymentMethodId Int
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now()) @updatedAt
  // Relations
  cashMovement    CashMovements  @relation(fields: [cashMovementId], references: [id])
  paymentMethod   PaymentMethods @relation(fields: [paymentMethodId], references: [id])

  @@map(name: "payment_method_details")
}

model InvoceTypes {
  id            Int             @id @default(autoincrement())
  code          String
  description   String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  // Relations
  cashMovements CashMovements[]

  @@map(name: "invoces_types")
}

model OtherTributes {
  id                   Int                    @id @default(autoincrement())
  code                 String
  description          String
  observation          String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @default(now()) @updatedAt
  // Relations
  otherTributesDetails OtherTributesDetails[]

  @@map(name: "other_tributes")
}

model OtherTributesDetails {
  id             Int           @id @default(autoincrement())
  cashMovementId Int
  amount         Float
  otherTributeId Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt
  // Relations
  cashMovement   CashMovements @relation(fields: [cashMovementId], references: [id])
  otherTribute   OtherTributes @relation(fields: [otherTributeId], references: [id])

  @@map(name: "other_tribute_details")
}

model States {
  id        Int         @id @default(autoincrement())
  name      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
  clients   Clients[]
  suppliers Suppliers[]

  @@map(name: "states")
}
